from django.utils.text import slugify
from uuid import uuid4
import re

# Regex to detect our temporary prefixes of the form 'choice-new-<hex>'
TEMP_PREFIX_RE = re.compile(r'^choice-new-[0-9a-f]{8}$')

def slugify_instance_name(instance, save=False):
    slug = slugify(instance.title)
    uslug = slugify(instance.title)
    n = 1
    Klass = instance.__class__
    while Klass.objects.filter(slug__startswith=uslug).exclude(id=instance.id).exists():
        uslug = f'{slug}-{n}'
        n += 1
    instance.slug = uslug
    if save:
        instance.save()


def generate_temp_prefix():
    return f'choice-new-{uuid4().hex[:8]}'
    # Generate a short, quasi-unique prefix for a new-unpersisted question formset.
    # Example output: 'choice-new-4f3c2a1b'
    # We use 8 hex chars which is extremely unlikely to collide for a single-page app.

def generate_stable_prefix(question_id):
    return f'choice-{question_id}'
    # Stable prefix for a saved question. e.g. question id 12 -> 'choice-12'
    # This is deterministic and easy to derive when the question has a real id.

def is_temp_prefix(prefix):
    return bool(prefix and TEMP_PREFIX_RE.match(prefix))
    # Return True when the prefix looks like one generated by generate_temp_prefix.


